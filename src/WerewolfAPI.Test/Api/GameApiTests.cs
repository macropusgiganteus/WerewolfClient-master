/* 
 * Werewolf Engine
 *
 * This is a werewolf game engine for REST access. It is primarily developed for CPE200 class at Computer Engineering, Chiang Mai University.
 *
 * OpenAPI spec version: 0.1.0
 * Contact: pruetboonma@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using WerewolfAPI.Client;
using WerewolfAPI.Api;
using WerewolfAPI.Model;

namespace WerewolfAPI.Test
{
    /// <summary>
    ///  Class for testing GameApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class GameApiTests
    {
        private GameApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new GameApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of GameApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' GameApi
            //Assert.IsInstanceOfType(typeof(GameApi), instance, "instance is a GameApi");
        }

        
        /// <summary>
        /// Test GameActionSessionIDActionIDTargetIDPost
        /// </summary>
        [Test]
        public void GameActionSessionIDActionIDTargetIDPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sessionID = null;
            //long? actionID = null;
            //long? targetID = null;
            //var response = instance.GameActionSessionIDActionIDTargetIDPost(sessionID, actionID, targetID);
            //Assert.IsInstanceOf<Game> (response, "response is Game");
        }
        
        /// <summary>
        /// Test GameGet
        /// </summary>
        [Test]
        public void GameGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GameGet();
            //Assert.IsInstanceOf<List<Game>> (response, "response is List<Game>");
        }
        
        /// <summary>
        /// Test GameSessionSessionIDDelete
        /// </summary>
        [Test]
        public void GameSessionSessionIDDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sessionID = null;
            //var response = instance.GameSessionSessionIDDelete(sessionID);
            //Assert.IsInstanceOf<Game> (response, "response is Game");
        }
        
        /// <summary>
        /// Test GameSessionSessionIDGet
        /// </summary>
        [Test]
        public void GameSessionSessionIDGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sessionID = null;
            //var response = instance.GameSessionSessionIDGet(sessionID);
            //Assert.IsInstanceOf<Game> (response, "response is Game");
        }
        
        /// <summary>
        /// Test GameSessionSessionIDPost
        /// </summary>
        [Test]
        public void GameSessionSessionIDPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sessionID = null;
            //var response = instance.GameSessionSessionIDPost(sessionID);
            //Assert.IsInstanceOf<Game> (response, "response is Game");
        }
        
        /// <summary>
        /// Test GetGameById
        /// </summary>
        [Test]
        public void GetGameByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? gameId = null;
            //var response = instance.GetGameById(gameId);
            //Assert.IsInstanceOf<Game> (response, "response is Game");
        }
        
    }

}
