/* 
 * Werewolf Engine
 *
 * This is a werewolf game engine for REST access. It is primarily developed for CPE200 class at Computer Engineering, Chiang Mai University.
 *
 * OpenAPI spec version: 0.1.0
 * Contact: pruetboonma@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = WerewolfAPI.Client.SwaggerDateConverter;
using System.ComponentModel.DataAnnotations.Schema;

namespace WerewolfAPI.Model
{
    /// <summary>
    /// Action
    /// </summary>
    [DataContract]
    public partial class Action :  IEquatable<Action>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Action" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Action() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Action" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="Name">Name (required).</param>
        /// <param name="Roles">Roles.</param>
        /// <param name="Description">Description.</param>
        public Action(long? Id = default(long?), string Name = default(string), List<Role> Roles = default(List<Role>), string Description = default(string))
        {
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for Action and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            this.Id = Id;
            this.Roles = Roles;
            this.Description = Description;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Roles
        /// </summary>
        [DataMember(Name="roles", EmitDefaultValue=false)]
        public List<Role> Roles { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// Gets or Sets Outcome
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OutcomeEnum
        {
            /// <summary>
            /// Enum TargetDeadEnum for TargetDead
            /// </summary>
            [EnumMember(Value = "Target Dead")]
            TargetDeadEnum = 1,

            /// <summary>
            /// Enum PlayerDeadEnum for PlayerDead
            /// </summary>
            [EnumMember(Value = "Player Dead")]
            PlayerDeadEnum = 2,

            /// <summary>
            /// Enum OtherPlayerDeadEnum for OtherPlayerDead
            /// </summary>
            [EnumMember(Value = "Other Player Dead")]
            OtherPlayerDeadEnum = 3,

            /// <summary>
            /// Enum NothingHappenedEnum for NothingHappened
            /// </summary>
            [EnumMember(Value = "Nothing Happened")]
            NothingHappenedEnum = 4,

            /// <summary>
            /// Enum ActionPerformedEnum for ActionPerformed
            /// </summary>
            [EnumMember(Value = "Action Performed")]
            ActionPerformedEnum = 5,

            /// <summary>
            /// Enum EnchantedEnum for Enchanted
            /// </summary>
            [EnumMember(Value = "Enchanted")]
            EnchantedEnum = 6,

            /// <summary>
            /// Enum JailedEnum for Jailed
            /// </summary>
            [EnumMember(Value = "Jailed")]
            JailedEnum = 7,

            /// <summary>
            /// Enum RevealedEnum for Revealed
            /// </summary>
            [EnumMember(Value = "Revealed")]
            RevealedEnum = 8,

            /// <summary>
            /// Enum UnknownEnum for Unknown
            /// </summary>
            [EnumMember(Value = "Unknown")]
            UnknownEnum = 9,

            /// <summary>
            /// Enum WerewolfEnum for Werewolf
            /// </summary>
            [EnumMember(Value = "Werewolf")]
            WerewolfEnum = 10,

            /// <summary>
            /// Enum VillagerEnum for Villager
            /// </summary>
            [EnumMember(Value = "Villager")]
            VillagerEnum = 11,

            /// <summary>
            /// Enum NotValidActionEnum for NotValidAction
            /// </summary>
            [EnumMember(Value = "Not Valid Action")]
            NotValidActionEnum = 12,

            /// <summary>
            /// Enum TargetIsNotAlivedEnum for TargetIsNotAlived
            /// </summary>
            [EnumMember(Value = "Target Is Not Alived")]
            TargetIsNotAlivedEnum = 13
        }

        /// <summary>
        /// Gets or Sets Outcome
        /// </summary>
        [NotMapped]
        [JsonProperty("outcome")]
        public OutcomeEnum? Outcome { get; set; }

        /// <summary>
        /// Gets or Sets Target
        /// </summary>
        [NotMapped]
        [JsonProperty("target")]
        public string Target { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Action {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Roles: ").Append(Roles).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Action);
        }

        /// <summary>
        /// Returns true if Action instances are equal
        /// </summary>
        /// <param name="input">Instance of Action to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Action input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Roles == input.Roles ||
                    this.Roles != null &&
                    this.Roles.SequenceEqual(input.Roles)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Roles != null)
                    hashCode = hashCode * 59 + this.Roles.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
