/* 
 * Werewolf Engine
 *
 * This is a werewolf game engine for REST access. It is primarily developed for CPE200 class at Computer Engineering, Chiang Mai University.
 *
 * OpenAPI spec version: 0.1.0
 * Contact: pruetboonma@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = WerewolfAPI.Client.SwaggerDateConverter;

namespace WerewolfAPI.Model
{
    /// <summary>
    /// Game
    /// </summary>
    [DataContract]
    public partial class Game :  IEquatable<Game>, IValidatableObject
    {
        /// <summary>
        /// Game status in the system
        /// </summary>
        /// <value>Game status in the system</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum Playing for value: playing
            /// </summary>
            [EnumMember(Value = "playing")]
            Playing = 1,
            
            /// <summary>
            /// Enum Waiting for value: waiting
            /// </summary>
            [EnumMember(Value = "waiting")]
            Waiting = 2,
            
            /// <summary>
            /// Enum Ended for value: ended
            /// </summary>
            [EnumMember(Value = "ended")]
            Ended = 3
        }

        /// <summary>
        /// Game status in the system
        /// </summary>
        /// <value>Game status in the system</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Defines Period
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PeriodEnum
        {
            
            /// <summary>
            /// Enum Day for value: day
            /// </summary>
            [EnumMember(Value = "day")]
            Day = 1,
            
            /// <summary>
            /// Enum Night for value: night
            /// </summary>
            [EnumMember(Value = "night")]
            Night = 2,
            
            /// <summary>
            /// Enum Processing for value: processing
            /// </summary>
            [EnumMember(Value = "processing")]
            Processing = 3
        }

        /// <summary>
        /// Gets or Sets Period
        /// </summary>
        [DataMember(Name="period", EmitDefaultValue=false)]
        public PeriodEnum? Period { get; set; }
        /// <summary>
        /// Defines Outcome
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OutcomeEnum
        {
            
            /// <summary>
            /// Enum Villagerwin for value: villagerwin
            /// </summary>
            [EnumMember(Value = "villager win")]
            Villagerwin = 1,
            
            /// <summary>
            /// Enum Werewolfwin for value: werewolfwin
            /// </summary>
            [EnumMember(Value = "werewolf win")]
            Werewolfwin = 2,
            
            /// <summary>
            /// Enum Foolwin for value: foolwin
            /// </summary>
            [EnumMember(Value = "fool win")]
            Foolwin = 3,
            
            /// <summary>
            /// Enum Headhunterwin for value: headhunterwin
            /// </summary>
            [EnumMember(Value = "headhunter win")]
            Headhunterwin = 4,
            
            /// <summary>
            /// Enum Serialkillerwin for value: serialkillerwin
            /// </summary>
            [EnumMember(Value = "serialkiller win")]
            Serialkillerwin = 5,
            
            /// <summary>
            /// Enum Nowin for value: nowin
            /// </summary>
            [EnumMember(Value = "no win")]
            Nowin = 6
        }

        /// <summary>
        /// Gets or Sets Outcome
        /// </summary>
        [DataMember(Name="outcome", EmitDefaultValue=false)]
        public OutcomeEnum? Outcome { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Game" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="Hash">Hash.</param>
        /// <param name="Day">Day.</param>
        /// <param name="Status">Game status in the system.</param>
        /// <param name="Period">Period.</param>
        /// <param name="Outcome">Outcome.</param>
        /// <param name="Players">Players.</param>
        public Game(long? Id = default(long?), string Hash = default(string), int? Day = default(int?), StatusEnum? Status = default(StatusEnum?), PeriodEnum? Period = default(PeriodEnum?), OutcomeEnum? Outcome = default(OutcomeEnum?), List<Player> Players = default(List<Player>))
        {
            this.Id = Id;
            this.Hash = Hash;
            this.Day = Day;
            this.Status = Status;
            this.Period = Period;
            this.Outcome = Outcome;
            this.Players = Players;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets Hash
        /// </summary>
        [DataMember(Name="hash", EmitDefaultValue=false)]
        public string Hash { get; set; }

        /// <summary>
        /// Gets or Sets Day
        /// </summary>
        [DataMember(Name="day", EmitDefaultValue=false)]
        public int? Day { get; set; }




        /// <summary>
        /// Gets or Sets Players
        /// </summary>
        [DataMember(Name="players", EmitDefaultValue=false)]
        public List<Player> Players { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Game {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Hash: ").Append(Hash).Append("\n");
            sb.Append("  Day: ").Append(Day).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("  Outcome: ").Append(Outcome).Append("\n");
            sb.Append("  Players: ").Append(Players).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Game);
        }

        /// <summary>
        /// Returns true if Game instances are equal
        /// </summary>
        /// <param name="input">Instance of Game to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Game input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Hash == input.Hash ||
                    (this.Hash != null &&
                    this.Hash.Equals(input.Hash))
                ) && 
                (
                    this.Day == input.Day ||
                    (this.Day != null &&
                    this.Day.Equals(input.Day))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Period == input.Period ||
                    (this.Period != null &&
                    this.Period.Equals(input.Period))
                ) && 
                (
                    this.Outcome == input.Outcome ||
                    (this.Outcome != null &&
                    this.Outcome.Equals(input.Outcome))
                ) && 
                (
                    this.Players == input.Players ||
                    this.Players != null &&
                    this.Players.SequenceEqual(input.Players)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Hash != null)
                    hashCode = hashCode * 59 + this.Hash.GetHashCode();
                if (this.Day != null)
                    hashCode = hashCode * 59 + this.Day.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Period != null)
                    hashCode = hashCode * 59 + this.Period.GetHashCode();
                if (this.Outcome != null)
                    hashCode = hashCode * 59 + this.Outcome.GetHashCode();
                if (this.Players != null)
                    hashCode = hashCode * 59 + this.Players.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
